//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Medicine.Clinic.Client.Model.OrderService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoEntity", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoVisit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoApartment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoClinic))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoDoctor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoPatient))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoSex))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoSpecimen))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoTube))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoIndication))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.OrderService.DtoOrder))]
    public partial class DtoEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoVisit", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoVisit : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoApartment ApartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoDoctor DoctorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoPatient PatientField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoApartment Apartment {
            get {
                return this.ApartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.ApartmentField, value) != true)) {
                    this.ApartmentField = value;
                    this.RaisePropertyChanged("Apartment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingNumber {
            get {
                return this.BillingNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingNumberField, value) != true)) {
                    this.BillingNumberField = value;
                    this.RaisePropertyChanged("BillingNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoDoctor Doctor {
            get {
                return this.DoctorField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorField, value) != true)) {
                    this.DoctorField = value;
                    this.RaisePropertyChanged("Doctor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoPatient Patient {
            get {
                return this.PatientField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientField, value) != true)) {
                    this.PatientField = value;
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoApartment", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoApartment : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoClinic ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BedId {
            get {
                return this.BedIdField;
            }
            set {
                if ((this.BedIdField.Equals(value) != true)) {
                    this.BedIdField = value;
                    this.RaisePropertyChanged("BedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoClinic Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomId {
            get {
                return this.RoomIdField;
            }
            set {
                if ((this.RoomIdField.Equals(value) != true)) {
                    this.RoomIdField = value;
                    this.RaisePropertyChanged("RoomId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoClinic", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoClinic : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoDoctor", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoDoctor : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoClinic ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoClinic Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoPatient", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoPatient : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DobField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MrnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoSex SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SsnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Dob {
            get {
                return this.DobField;
            }
            set {
                if ((this.DobField.Equals(value) != true)) {
                    this.DobField = value;
                    this.RaisePropertyChanged("Dob");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Dod {
            get {
                return this.DodField;
            }
            set {
                if ((this.DodField.Equals(value) != true)) {
                    this.DodField = value;
                    this.RaisePropertyChanged("Dod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mrn {
            get {
                return this.MrnField;
            }
            set {
                if ((object.ReferenceEquals(this.MrnField, value) != true)) {
                    this.MrnField = value;
                    this.RaisePropertyChanged("Mrn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoSex Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ssn {
            get {
                return this.SsnField;
            }
            set {
                if ((object.ReferenceEquals(this.SsnField, value) != true)) {
                    this.SsnField = value;
                    this.RaisePropertyChanged("Ssn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoSex", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoSex : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoConcreteTest", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoConcreteTest : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoOrder OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoTest TestField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoOrder Order {
            get {
                return this.OrderField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderField, value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoTest Test {
            get {
                return this.TestField;
            }
            set {
                if ((object.ReferenceEquals(this.TestField, value) != true)) {
                    this.TestField = value;
                    this.RaisePropertyChanged("Test");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoTest", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoTest : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoSpecimen DefaultSpecimenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoSpecimen DefaultSpecimen {
            get {
                return this.DefaultSpecimenField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultSpecimenField, value) != true)) {
                    this.DefaultSpecimenField = value;
                    this.RaisePropertyChanged("DefaultSpecimen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoSpecimen", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoSpecimen : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoTube DefaultTubeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoTube DefaultTube {
            get {
                return this.DefaultTubeField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultTubeField, value) != true)) {
                    this.DefaultTubeField = value;
                    this.RaisePropertyChanged("DefaultTube");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoTube", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoTube : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VolumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoConcreteSpecimen", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoConcreteSpecimen : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CollectedDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoOrder OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoSpecimen SpecimenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VolumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CollectedDt {
            get {
                return this.CollectedDtField;
            }
            set {
                if ((this.CollectedDtField.Equals(value) != true)) {
                    this.CollectedDtField = value;
                    this.RaisePropertyChanged("CollectedDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoOrder Order {
            get {
                return this.OrderField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderField, value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoSpecimen Specimen {
            get {
                return this.SpecimenField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecimenField, value) != true)) {
                    this.SpecimenField = value;
                    this.RaisePropertyChanged("Specimen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoConcreteTube", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoConcreteTube : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoOrder OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ReceivedDtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoTube TubeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoOrder Order {
            get {
                return this.OrderField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderField, value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ReceivedDt {
            get {
                return this.ReceivedDtField;
            }
            set {
                if ((this.ReceivedDtField.Equals(value) != true)) {
                    this.ReceivedDtField = value;
                    this.RaisePropertyChanged("ReceivedDt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoTube Tube {
            get {
                return this.TubeField;
            }
            set {
                if ((object.ReferenceEquals(this.TubeField, value) != true)) {
                    this.TubeField = value;
                    this.RaisePropertyChanged("Tube");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoConcreteIndication", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoConcreteIndication : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoIndication IndicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoOrder OrderField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoIndication Indication {
            get {
                return this.IndicationField;
            }
            set {
                if ((object.ReferenceEquals(this.IndicationField, value) != true)) {
                    this.IndicationField = value;
                    this.RaisePropertyChanged("Indication");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoOrder Order {
            get {
                return this.OrderField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderField, value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoIndication", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoIndication : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoTestSexAllowed", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoTestSexAllowed : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoSex SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoTest TestField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoSex Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoTest Test {
            get {
                return this.TestField;
            }
            set {
                if ((object.ReferenceEquals(this.TestField, value) != true)) {
                    this.TestField = value;
                    this.RaisePropertyChanged("Test");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoOrder", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoOrder : Medicine.Clinic.Client.Model.OrderService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClinicalInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoVisit VisitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClinicalInfo {
            get {
                return this.ClinicalInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicalInfoField, value) != true)) {
                    this.ClinicalInfoField = value;
                    this.RaisePropertyChanged("ClinicalInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoVisit Visit {
            get {
                return this.VisitField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitField, value) != true)) {
                    this.VisitField = value;
                    this.RaisePropertyChanged("Visit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoTestTubeAttach", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoTestTubeAttach : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest DtoConcreteTestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube DtoConctereTubeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest DtoConcreteTest {
            get {
                return this.DtoConcreteTestField;
            }
            set {
                if ((object.ReferenceEquals(this.DtoConcreteTestField, value) != true)) {
                    this.DtoConcreteTestField = value;
                    this.RaisePropertyChanged("DtoConcreteTest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube DtoConctereTube {
            get {
                return this.DtoConctereTubeField;
            }
            set {
                if ((object.ReferenceEquals(this.DtoConctereTubeField, value) != true)) {
                    this.DtoConctereTubeField = value;
                    this.RaisePropertyChanged("DtoConctereTube");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoSpecimenTubeAttach", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoSpecimenTubeAttach : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen ConcreteSpecimenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube ConcreteTubeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen ConcreteSpecimen {
            get {
                return this.ConcreteSpecimenField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcreteSpecimenField, value) != true)) {
                    this.ConcreteSpecimenField = value;
                    this.RaisePropertyChanged("ConcreteSpecimen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube ConcreteTube {
            get {
                return this.ConcreteTubeField;
            }
            set {
                if ((object.ReferenceEquals(this.ConcreteTubeField, value) != true)) {
                    this.ConcreteTubeField = value;
                    this.RaisePropertyChanged("ConcreteTube");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="OrderService.IOrderService")]
    public interface IOrderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditOrder", ReplyAction="http://tempuri.org/IOrderService/EditOrderResponse")]
        string EditOrder(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditOrder", ReplyAction="http://tempuri.org/IOrderService/EditOrderResponse")]
        System.Threading.Tasks.Task<string> EditOrderAsync(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindOrders", ReplyAction="http://tempuri.org/IOrderService/FindOrdersResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoOrder[] FindOrders(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindOrders", ReplyAction="http://tempuri.org/IOrderService/FindOrdersResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoOrder[]> FindOrdersAsync(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderNumber", ReplyAction="http://tempuri.org/IOrderService/GetOrderNumberResponse")]
        string GetOrderNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrderNumber", ReplyAction="http://tempuri.org/IOrderService/GetOrderNumberResponse")]
        System.Threading.Tasks.Task<string> GetOrderNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrdersByVisit", ReplyAction="http://tempuri.org/IOrderService/GetOrdersByVisitResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoOrder[] GetOrdersByVisit(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetOrdersByVisit", ReplyAction="http://tempuri.org/IOrderService/GetOrdersByVisitResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoOrder[]> GetOrdersByVisitAsync(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteTestsByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteTestsByOrderResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest[] FindConcreteTestsByOrder(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteTestsByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteTestsByOrderResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest[]> FindConcreteTestsByOrderAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteSpecimensByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteSpecimensByOrderResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen[] FindConcreteSpecimensByOrder(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteSpecimensByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteSpecimensByOrderResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen[]> FindConcreteSpecimensByOrderAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteTubesByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteTubesByOrderResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube[] FindConcreteTubesByOrder(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteTubesByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteTubesByOrderResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube[]> FindConcreteTubesByOrderAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteIndicationsByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteIndicationsByOrderResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication[] FindConcreteIndicationsByOrder(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/FindConcreteIndicationsByOrder", ReplyAction="http://tempuri.org/IOrderService/FindConcreteIndicationsByOrderResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication[]> FindConcreteIndicationsByOrderAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddTestSexAllowed", ReplyAction="http://tempuri.org/IOrderService/AddTestSexAllowedResponse")]
        string AddTestSexAllowed(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddTestSexAllowed", ReplyAction="http://tempuri.org/IOrderService/AddTestSexAllowedResponse")]
        System.Threading.Tasks.Task<string> AddTestSexAllowedAsync(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/SearchTestSexAllowedsByTest", ReplyAction="http://tempuri.org/IOrderService/SearchTestSexAllowedsByTestResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed[] SearchTestSexAllowedsByTest(string testCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/SearchTestSexAllowedsByTest", ReplyAction="http://tempuri.org/IOrderService/SearchTestSexAllowedsByTestResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed[]> SearchTestSexAllowedsByTestAsync(string testCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteTestSexAllowed", ReplyAction="http://tempuri.org/IOrderService/DeleteTestSexAllowedResponse")]
        string DeleteTestSexAllowed(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteTestSexAllowed", ReplyAction="http://tempuri.org/IOrderService/DeleteTestSexAllowedResponse")]
        System.Threading.Tasks.Task<string> DeleteTestSexAllowedAsync(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteTest", ReplyAction="http://tempuri.org/IOrderService/AddConcreteTestResponse")]
        string AddConcreteTest(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteTest", ReplyAction="http://tempuri.org/IOrderService/AddConcreteTestResponse")]
        System.Threading.Tasks.Task<string> AddConcreteTestAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteTube", ReplyAction="http://tempuri.org/IOrderService/AddConcreteTubeResponse")]
        string AddConcreteTube(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteTube", ReplyAction="http://tempuri.org/IOrderService/AddConcreteTubeResponse")]
        System.Threading.Tasks.Task<string> AddConcreteTubeAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteSpecimen", ReplyAction="http://tempuri.org/IOrderService/AddConcreteSpecimenResponse")]
        string AddConcreteSpecimen(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteSpecimen", ReplyAction="http://tempuri.org/IOrderService/AddConcreteSpecimenResponse")]
        System.Threading.Tasks.Task<string> AddConcreteSpecimenAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddTestTubeAttach", ReplyAction="http://tempuri.org/IOrderService/AddTestTubeAttachResponse")]
        void AddTestTubeAttach(Medicine.Clinic.Client.Model.OrderService.DtoTestTubeAttach dtoTestTubeAttach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddTestTubeAttach", ReplyAction="http://tempuri.org/IOrderService/AddTestTubeAttachResponse")]
        System.Threading.Tasks.Task AddTestTubeAttachAsync(Medicine.Clinic.Client.Model.OrderService.DtoTestTubeAttach dtoTestTubeAttach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddSpecimenTubeAttach", ReplyAction="http://tempuri.org/IOrderService/AddSpecimenTubeAttachResponse")]
        void AddSpecimenTubeAttach(Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach dtoSpecimenTubeAttach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddSpecimenTubeAttach", ReplyAction="http://tempuri.org/IOrderService/AddSpecimenTubeAttachResponse")]
        System.Threading.Tasks.Task AddSpecimenTubeAttachAsync(Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach dtoSpecimenTubeAttach);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetConcreteTestByCode", ReplyAction="http://tempuri.org/IOrderService/GetConcreteTestByCodeResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest GetConcreteTestByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetConcreteTestByCode", ReplyAction="http://tempuri.org/IOrderService/GetConcreteTestByCodeResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest> GetConcreteTestByCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetConcreteSpecimenByCode", ReplyAction="http://tempuri.org/IOrderService/GetConcreteSpecimenByCodeResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen GetConcreteSpecimenByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetConcreteSpecimenByCode", ReplyAction="http://tempuri.org/IOrderService/GetConcreteSpecimenByCodeResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen> GetConcreteSpecimenByCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetConcreteTubeByCode", ReplyAction="http://tempuri.org/IOrderService/GetConcreteTubeByCodeResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube GetConcreteTubeByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetConcreteTubeByCode", ReplyAction="http://tempuri.org/IOrderService/GetConcreteTubeByCodeResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube> GetConcreteTubeByCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteIndication", ReplyAction="http://tempuri.org/IOrderService/AddConcreteIndicationResponse")]
        string AddConcreteIndication(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/AddConcreteIndication", ReplyAction="http://tempuri.org/IOrderService/AddConcreteIndicationResponse")]
        System.Threading.Tasks.Task<string> AddConcreteIndicationAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetTestTubeAttachesStringByTube", ReplyAction="http://tempuri.org/IOrderService/GetTestTubeAttachesStringByTubeResponse")]
        string GetTestTubeAttachesStringByTube(string concreteTubeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetTestTubeAttachesStringByTube", ReplyAction="http://tempuri.org/IOrderService/GetTestTubeAttachesStringByTubeResponse")]
        System.Threading.Tasks.Task<string> GetTestTubeAttachesStringByTubeAsync(string concreteTubeCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetSpecimenTubeAttachesBySpecimen", ReplyAction="http://tempuri.org/IOrderService/GetSpecimenTubeAttachesBySpecimenResponse")]
        Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach[] GetSpecimenTubeAttachesBySpecimen(string concreteSpecimenCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/GetSpecimenTubeAttachesBySpecimen", ReplyAction="http://tempuri.org/IOrderService/GetSpecimenTubeAttachesBySpecimenResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach[]> GetSpecimenTubeAttachesBySpecimenAsync(string concreteSpecimenCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteTest", ReplyAction="http://tempuri.org/IOrderService/EditConcreteTestResponse")]
        bool EditConcreteTest(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteTest", ReplyAction="http://tempuri.org/IOrderService/EditConcreteTestResponse")]
        System.Threading.Tasks.Task<bool> EditConcreteTestAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteTube", ReplyAction="http://tempuri.org/IOrderService/EditConcreteTubeResponse")]
        bool EditConcreteTube(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteTube", ReplyAction="http://tempuri.org/IOrderService/EditConcreteTubeResponse")]
        System.Threading.Tasks.Task<bool> EditConcreteTubeAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteSpecimen", ReplyAction="http://tempuri.org/IOrderService/EditConcreteSpecimenResponse")]
        bool EditConcreteSpecimen(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteSpecimen", ReplyAction="http://tempuri.org/IOrderService/EditConcreteSpecimenResponse")]
        System.Threading.Tasks.Task<bool> EditConcreteSpecimenAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteIndication", ReplyAction="http://tempuri.org/IOrderService/EditConcreteIndicationResponse")]
        bool EditConcreteIndication(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/EditConcreteIndication", ReplyAction="http://tempuri.org/IOrderService/EditConcreteIndicationResponse")]
        System.Threading.Tasks.Task<bool> EditConcreteIndicationAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteTestTubeAttach", ReplyAction="http://tempuri.org/IOrderService/DeleteTestTubeAttachResponse")]
        void DeleteTestTubeAttach(string orderNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteTestTubeAttach", ReplyAction="http://tempuri.org/IOrderService/DeleteTestTubeAttachResponse")]
        System.Threading.Tasks.Task DeleteTestTubeAttachAsync(string orderNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteSpecimenTubeAttach", ReplyAction="http://tempuri.org/IOrderService/DeleteSpecimenTubeAttachResponse")]
        void DeleteSpecimenTubeAttach(string orderNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteSpecimenTubeAttach", ReplyAction="http://tempuri.org/IOrderService/DeleteSpecimenTubeAttachResponse")]
        System.Threading.Tasks.Task DeleteSpecimenTubeAttachAsync(string orderNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteTest", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteTestResponse")]
        void DeleteConcreteTest(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteTest", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteTestResponse")]
        System.Threading.Tasks.Task DeleteConcreteTestAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteSpecimen", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteSpecimenResponse")]
        void DeleteConcreteSpecimen(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteSpecimen", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteSpecimenResponse")]
        System.Threading.Tasks.Task DeleteConcreteSpecimenAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteTube", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteTubeResponse")]
        void DeleteConcreteTube(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteTube", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteTubeResponse")]
        System.Threading.Tasks.Task DeleteConcreteTubeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteIndication", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteIndicationResponse")]
        void DeleteConcreteIndication(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrderService/DeleteConcreteIndication", ReplyAction="http://tempuri.org/IOrderService/DeleteConcreteIndicationResponse")]
        System.Threading.Tasks.Task DeleteConcreteIndicationAsync(string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrderServiceChannel : Medicine.Clinic.Client.Model.OrderService.IOrderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrderServiceClient : System.ServiceModel.ClientBase<Medicine.Clinic.Client.Model.OrderService.IOrderService>, Medicine.Clinic.Client.Model.OrderService.IOrderService {
        
        public OrderServiceClient() {
        }
        
        public OrderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public OrderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string EditOrder(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder) {
            return base.Channel.EditOrder(dtoOrder);
        }
        
        public System.Threading.Tasks.Task<string> EditOrderAsync(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder) {
            return base.Channel.EditOrderAsync(dtoOrder);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoOrder[] FindOrders(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder) {
            return base.Channel.FindOrders(dtoOrder);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoOrder[]> FindOrdersAsync(Medicine.Clinic.Client.Model.OrderService.DtoOrder dtoOrder) {
            return base.Channel.FindOrdersAsync(dtoOrder);
        }
        
        public string GetOrderNumber() {
            return base.Channel.GetOrderNumber();
        }
        
        public System.Threading.Tasks.Task<string> GetOrderNumberAsync() {
            return base.Channel.GetOrderNumberAsync();
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoOrder[] GetOrdersByVisit(string billingNumber) {
            return base.Channel.GetOrdersByVisit(billingNumber);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoOrder[]> GetOrdersByVisitAsync(string billingNumber) {
            return base.Channel.GetOrdersByVisitAsync(billingNumber);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest[] FindConcreteTestsByOrder(string number) {
            return base.Channel.FindConcreteTestsByOrder(number);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest[]> FindConcreteTestsByOrderAsync(string number) {
            return base.Channel.FindConcreteTestsByOrderAsync(number);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen[] FindConcreteSpecimensByOrder(string number) {
            return base.Channel.FindConcreteSpecimensByOrder(number);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen[]> FindConcreteSpecimensByOrderAsync(string number) {
            return base.Channel.FindConcreteSpecimensByOrderAsync(number);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube[] FindConcreteTubesByOrder(string number) {
            return base.Channel.FindConcreteTubesByOrder(number);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube[]> FindConcreteTubesByOrderAsync(string number) {
            return base.Channel.FindConcreteTubesByOrderAsync(number);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication[] FindConcreteIndicationsByOrder(string number) {
            return base.Channel.FindConcreteIndicationsByOrder(number);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication[]> FindConcreteIndicationsByOrderAsync(string number) {
            return base.Channel.FindConcreteIndicationsByOrderAsync(number);
        }
        
        public string AddTestSexAllowed(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed) {
            return base.Channel.AddTestSexAllowed(dtoTestSexAllowed);
        }
        
        public System.Threading.Tasks.Task<string> AddTestSexAllowedAsync(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed) {
            return base.Channel.AddTestSexAllowedAsync(dtoTestSexAllowed);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed[] SearchTestSexAllowedsByTest(string testCode) {
            return base.Channel.SearchTestSexAllowedsByTest(testCode);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed[]> SearchTestSexAllowedsByTestAsync(string testCode) {
            return base.Channel.SearchTestSexAllowedsByTestAsync(testCode);
        }
        
        public string DeleteTestSexAllowed(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed) {
            return base.Channel.DeleteTestSexAllowed(dtoTestSexAllowed);
        }
        
        public System.Threading.Tasks.Task<string> DeleteTestSexAllowedAsync(Medicine.Clinic.Client.Model.OrderService.DtoTestSexAllowed dtoTestSexAllowed) {
            return base.Channel.DeleteTestSexAllowedAsync(dtoTestSexAllowed);
        }
        
        public string AddConcreteTest(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest) {
            return base.Channel.AddConcreteTest(dtoConcreteTest);
        }
        
        public System.Threading.Tasks.Task<string> AddConcreteTestAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest) {
            return base.Channel.AddConcreteTestAsync(dtoConcreteTest);
        }
        
        public string AddConcreteTube(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube) {
            return base.Channel.AddConcreteTube(dtoConcreteTube);
        }
        
        public System.Threading.Tasks.Task<string> AddConcreteTubeAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube) {
            return base.Channel.AddConcreteTubeAsync(dtoConcreteTube);
        }
        
        public string AddConcreteSpecimen(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen) {
            return base.Channel.AddConcreteSpecimen(dtoConcreteSpecimen);
        }
        
        public System.Threading.Tasks.Task<string> AddConcreteSpecimenAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen) {
            return base.Channel.AddConcreteSpecimenAsync(dtoConcreteSpecimen);
        }
        
        public void AddTestTubeAttach(Medicine.Clinic.Client.Model.OrderService.DtoTestTubeAttach dtoTestTubeAttach) {
            base.Channel.AddTestTubeAttach(dtoTestTubeAttach);
        }
        
        public System.Threading.Tasks.Task AddTestTubeAttachAsync(Medicine.Clinic.Client.Model.OrderService.DtoTestTubeAttach dtoTestTubeAttach) {
            return base.Channel.AddTestTubeAttachAsync(dtoTestTubeAttach);
        }
        
        public void AddSpecimenTubeAttach(Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach dtoSpecimenTubeAttach) {
            base.Channel.AddSpecimenTubeAttach(dtoSpecimenTubeAttach);
        }
        
        public System.Threading.Tasks.Task AddSpecimenTubeAttachAsync(Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach dtoSpecimenTubeAttach) {
            return base.Channel.AddSpecimenTubeAttachAsync(dtoSpecimenTubeAttach);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest GetConcreteTestByCode(string code) {
            return base.Channel.GetConcreteTestByCode(code);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest> GetConcreteTestByCodeAsync(string code) {
            return base.Channel.GetConcreteTestByCodeAsync(code);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen GetConcreteSpecimenByCode(string code) {
            return base.Channel.GetConcreteSpecimenByCode(code);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen> GetConcreteSpecimenByCodeAsync(string code) {
            return base.Channel.GetConcreteSpecimenByCodeAsync(code);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube GetConcreteTubeByCode(string code) {
            return base.Channel.GetConcreteTubeByCode(code);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube> GetConcreteTubeByCodeAsync(string code) {
            return base.Channel.GetConcreteTubeByCodeAsync(code);
        }
        
        public string AddConcreteIndication(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication) {
            return base.Channel.AddConcreteIndication(dtoConcreteIndication);
        }
        
        public System.Threading.Tasks.Task<string> AddConcreteIndicationAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication) {
            return base.Channel.AddConcreteIndicationAsync(dtoConcreteIndication);
        }
        
        public string GetTestTubeAttachesStringByTube(string concreteTubeCode) {
            return base.Channel.GetTestTubeAttachesStringByTube(concreteTubeCode);
        }
        
        public System.Threading.Tasks.Task<string> GetTestTubeAttachesStringByTubeAsync(string concreteTubeCode) {
            return base.Channel.GetTestTubeAttachesStringByTubeAsync(concreteTubeCode);
        }
        
        public Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach[] GetSpecimenTubeAttachesBySpecimen(string concreteSpecimenCode) {
            return base.Channel.GetSpecimenTubeAttachesBySpecimen(concreteSpecimenCode);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.OrderService.DtoSpecimenTubeAttach[]> GetSpecimenTubeAttachesBySpecimenAsync(string concreteSpecimenCode) {
            return base.Channel.GetSpecimenTubeAttachesBySpecimenAsync(concreteSpecimenCode);
        }
        
        public bool EditConcreteTest(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest) {
            return base.Channel.EditConcreteTest(dtoConcreteTest);
        }
        
        public System.Threading.Tasks.Task<bool> EditConcreteTestAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTest dtoConcreteTest) {
            return base.Channel.EditConcreteTestAsync(dtoConcreteTest);
        }
        
        public bool EditConcreteTube(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube) {
            return base.Channel.EditConcreteTube(dtoConcreteTube);
        }
        
        public System.Threading.Tasks.Task<bool> EditConcreteTubeAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteTube dtoConcreteTube) {
            return base.Channel.EditConcreteTubeAsync(dtoConcreteTube);
        }
        
        public bool EditConcreteSpecimen(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen) {
            return base.Channel.EditConcreteSpecimen(dtoConcreteSpecimen);
        }
        
        public System.Threading.Tasks.Task<bool> EditConcreteSpecimenAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteSpecimen dtoConcreteSpecimen) {
            return base.Channel.EditConcreteSpecimenAsync(dtoConcreteSpecimen);
        }
        
        public bool EditConcreteIndication(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication) {
            return base.Channel.EditConcreteIndication(dtoConcreteIndication);
        }
        
        public System.Threading.Tasks.Task<bool> EditConcreteIndicationAsync(Medicine.Clinic.Client.Model.OrderService.DtoConcreteIndication dtoConcreteIndication) {
            return base.Channel.EditConcreteIndicationAsync(dtoConcreteIndication);
        }
        
        public void DeleteTestTubeAttach(string orderNumber) {
            base.Channel.DeleteTestTubeAttach(orderNumber);
        }
        
        public System.Threading.Tasks.Task DeleteTestTubeAttachAsync(string orderNumber) {
            return base.Channel.DeleteTestTubeAttachAsync(orderNumber);
        }
        
        public void DeleteSpecimenTubeAttach(string orderNumber) {
            base.Channel.DeleteSpecimenTubeAttach(orderNumber);
        }
        
        public System.Threading.Tasks.Task DeleteSpecimenTubeAttachAsync(string orderNumber) {
            return base.Channel.DeleteSpecimenTubeAttachAsync(orderNumber);
        }
        
        public void DeleteConcreteTest(string code) {
            base.Channel.DeleteConcreteTest(code);
        }
        
        public System.Threading.Tasks.Task DeleteConcreteTestAsync(string code) {
            return base.Channel.DeleteConcreteTestAsync(code);
        }
        
        public void DeleteConcreteSpecimen(string code) {
            base.Channel.DeleteConcreteSpecimen(code);
        }
        
        public System.Threading.Tasks.Task DeleteConcreteSpecimenAsync(string code) {
            return base.Channel.DeleteConcreteSpecimenAsync(code);
        }
        
        public void DeleteConcreteTube(string code) {
            base.Channel.DeleteConcreteTube(code);
        }
        
        public System.Threading.Tasks.Task DeleteConcreteTubeAsync(string code) {
            return base.Channel.DeleteConcreteTubeAsync(code);
        }
        
        public void DeleteConcreteIndication(string code) {
            base.Channel.DeleteConcreteIndication(code);
        }
        
        public System.Threading.Tasks.Task DeleteConcreteIndicationAsync(string code) {
            return base.Channel.DeleteConcreteIndicationAsync(code);
        }
    }
}
