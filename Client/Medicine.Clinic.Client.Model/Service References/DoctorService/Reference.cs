//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Medicine.Clinic.Client.Model.DoctorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoEntity", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.DoctorService.DtoClinic))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor))]
    public partial class DtoEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoClinic", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoClinic : Medicine.Clinic.Client.Model.DoctorService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoDoctor", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoDoctor : Medicine.Clinic.Client.Model.DoctorService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.DoctorService.DtoClinic ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.DoctorService.DtoClinic Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DoctorService.IDoctorService")]
    public interface IDoctorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/FindDoctors", ReplyAction="http://tempuri.org/IDoctorService/FindDoctorsResponse")]
        Medicine.Clinic.Client.Model.DoctorService.DtoDoctor[] FindDoctors(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/FindDoctors", ReplyAction="http://tempuri.org/IDoctorService/FindDoctorsResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.DoctorService.DtoDoctor[]> FindDoctorsAsync(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/EditDoctor", ReplyAction="http://tempuri.org/IDoctorService/EditDoctorResponse")]
        string EditDoctor(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDoctorService/EditDoctor", ReplyAction="http://tempuri.org/IDoctorService/EditDoctorResponse")]
        System.Threading.Tasks.Task<string> EditDoctorAsync(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDoctorServiceChannel : Medicine.Clinic.Client.Model.DoctorService.IDoctorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoctorServiceClient : System.ServiceModel.ClientBase<Medicine.Clinic.Client.Model.DoctorService.IDoctorService>, Medicine.Clinic.Client.Model.DoctorService.IDoctorService {
        
        public DoctorServiceClient() {
        }
        
        public DoctorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DoctorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DoctorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Medicine.Clinic.Client.Model.DoctorService.DtoDoctor[] FindDoctors(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor) {
            return base.Channel.FindDoctors(dtoDoctor);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.DoctorService.DtoDoctor[]> FindDoctorsAsync(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor) {
            return base.Channel.FindDoctorsAsync(dtoDoctor);
        }
        
        public string EditDoctor(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor) {
            return base.Channel.EditDoctor(dtoDoctor);
        }
        
        public System.Threading.Tasks.Task<string> EditDoctorAsync(Medicine.Clinic.Client.Model.DoctorService.DtoDoctor dtoDoctor) {
            return base.Channel.EditDoctorAsync(dtoDoctor);
        }
    }
}
