//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Medicine.Clinic.Client.Model.DiagnosisService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoEntity", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis))]
    public partial class DtoEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoDiagnosis", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoDiagnosis : Medicine.Clinic.Client.Model.DiagnosisService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiagnosisService.IDiagnosisService")]
    public interface IDiagnosisService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnosisService/FindDiagnoses", ReplyAction="http://tempuri.org/IDiagnosisService/FindDiagnosesResponse")]
        Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis[] FindDiagnoses(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnosisService/FindDiagnoses", ReplyAction="http://tempuri.org/IDiagnosisService/FindDiagnosesResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis[]> FindDiagnosesAsync(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnosisService/EditDiagnosis", ReplyAction="http://tempuri.org/IDiagnosisService/EditDiagnosisResponse")]
        string EditDiagnosis(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnosisService/EditDiagnosis", ReplyAction="http://tempuri.org/IDiagnosisService/EditDiagnosisResponse")]
        System.Threading.Tasks.Task<string> EditDiagnosisAsync(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiagnosisServiceChannel : Medicine.Clinic.Client.Model.DiagnosisService.IDiagnosisService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiagnosisServiceClient : System.ServiceModel.ClientBase<Medicine.Clinic.Client.Model.DiagnosisService.IDiagnosisService>, Medicine.Clinic.Client.Model.DiagnosisService.IDiagnosisService {
        
        public DiagnosisServiceClient() {
        }
        
        public DiagnosisServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiagnosisServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiagnosisServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiagnosisServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis[] FindDiagnoses(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis) {
            return base.Channel.FindDiagnoses(dtoDiagnosis);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis[]> FindDiagnosesAsync(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis) {
            return base.Channel.FindDiagnosesAsync(dtoDiagnosis);
        }
        
        public string EditDiagnosis(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis) {
            return base.Channel.EditDiagnosis(dtoDiagnosis);
        }
        
        public System.Threading.Tasks.Task<string> EditDiagnosisAsync(Medicine.Clinic.Client.Model.DiagnosisService.DtoDiagnosis dtoDiagnosis) {
            return base.Channel.EditDiagnosisAsync(dtoDiagnosis);
        }
    }
}
