//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Medicine.Clinic.Client.Model.TestService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoEntity", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoSpecimen))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoTube))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoConcreteTest))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoOrder))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoVisit))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoApartment))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoClinic))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoDoctor))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoPatient))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoSex))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Medicine.Clinic.Client.Model.TestService.DtoTest))]
    public partial class DtoEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoSpecimen", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoSpecimen : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoTube DefaultTubeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoTube DefaultTube {
            get {
                return this.DefaultTubeField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultTubeField, value) != true)) {
                    this.DefaultTubeField = value;
                    this.RaisePropertyChanged("DefaultTube");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoTube", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoTube : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VolumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoConcreteTest", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoConcreteTest : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoOrder OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoTest TestField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoOrder Order {
            get {
                return this.OrderField;
            }
            set {
                if ((object.ReferenceEquals(this.OrderField, value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoTest Test {
            get {
                return this.TestField;
            }
            set {
                if ((object.ReferenceEquals(this.TestField, value) != true)) {
                    this.TestField = value;
                    this.RaisePropertyChanged("Test");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoOrder", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoOrder : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClinicalInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoVisit VisitField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClinicalInfo {
            get {
                return this.ClinicalInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicalInfoField, value) != true)) {
                    this.ClinicalInfoField = value;
                    this.RaisePropertyChanged("ClinicalInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoVisit Visit {
            get {
                return this.VisitField;
            }
            set {
                if ((object.ReferenceEquals(this.VisitField, value) != true)) {
                    this.VisitField = value;
                    this.RaisePropertyChanged("Visit");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoVisit", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoVisit : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoApartment ApartmentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoDoctor DoctorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoPatient PatientField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoApartment Apartment {
            get {
                return this.ApartmentField;
            }
            set {
                if ((object.ReferenceEquals(this.ApartmentField, value) != true)) {
                    this.ApartmentField = value;
                    this.RaisePropertyChanged("Apartment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingNumber {
            get {
                return this.BillingNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingNumberField, value) != true)) {
                    this.BillingNumberField = value;
                    this.RaisePropertyChanged("BillingNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoDoctor Doctor {
            get {
                return this.DoctorField;
            }
            set {
                if ((object.ReferenceEquals(this.DoctorField, value) != true)) {
                    this.DoctorField = value;
                    this.RaisePropertyChanged("Doctor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoPatient Patient {
            get {
                return this.PatientField;
            }
            set {
                if ((object.ReferenceEquals(this.PatientField, value) != true)) {
                    this.PatientField = value;
                    this.RaisePropertyChanged("Patient");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoApartment", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoApartment : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BedIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoClinic ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoomIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BedId {
            get {
                return this.BedIdField;
            }
            set {
                if ((this.BedIdField.Equals(value) != true)) {
                    this.BedIdField = value;
                    this.RaisePropertyChanged("BedId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoClinic Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoomId {
            get {
                return this.RoomIdField;
            }
            set {
                if ((this.RoomIdField.Equals(value) != true)) {
                    this.RoomIdField = value;
                    this.RaisePropertyChanged("RoomId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoClinic", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoClinic : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoDoctor", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoDoctor : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoClinic ClinicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoClinic Clinic {
            get {
                return this.ClinicField;
            }
            set {
                if ((object.ReferenceEquals(this.ClinicField, value) != true)) {
                    this.ClinicField = value;
                    this.RaisePropertyChanged("Clinic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoPatient", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoPatient : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DobField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MiddleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MrnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoSex SexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SsnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Age {
            get {
                return this.AgeField;
            }
            set {
                if ((this.AgeField.Equals(value) != true)) {
                    this.AgeField = value;
                    this.RaisePropertyChanged("Age");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Dob {
            get {
                return this.DobField;
            }
            set {
                if ((this.DobField.Equals(value) != true)) {
                    this.DobField = value;
                    this.RaisePropertyChanged("Dob");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Dod {
            get {
                return this.DodField;
            }
            set {
                if ((this.DodField.Equals(value) != true)) {
                    this.DodField = value;
                    this.RaisePropertyChanged("Dod");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MiddleName {
            get {
                return this.MiddleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MiddleNameField, value) != true)) {
                    this.MiddleNameField = value;
                    this.RaisePropertyChanged("MiddleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mrn {
            get {
                return this.MrnField;
            }
            set {
                if ((object.ReferenceEquals(this.MrnField, value) != true)) {
                    this.MrnField = value;
                    this.RaisePropertyChanged("Mrn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoSex Sex {
            get {
                return this.SexField;
            }
            set {
                if ((object.ReferenceEquals(this.SexField, value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ssn {
            get {
                return this.SsnField;
            }
            set {
                if ((object.ReferenceEquals(this.SsnField, value) != true)) {
                    this.SsnField = value;
                    this.RaisePropertyChanged("Ssn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoSex", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoSex : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DtoTest", Namespace="http://schemas.datacontract.org/2004/07/Medicine.Clinic.Service")]
    [System.SerializableAttribute()]
    public partial class DtoTest : Medicine.Clinic.Client.Model.TestService.DtoEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CostField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Medicine.Clinic.Client.Model.TestService.DtoSpecimen DefaultSpecimenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEditField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Cost {
            get {
                return this.CostField;
            }
            set {
                if ((this.CostField.Equals(value) != true)) {
                    this.CostField = value;
                    this.RaisePropertyChanged("Cost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Medicine.Clinic.Client.Model.TestService.DtoSpecimen DefaultSpecimen {
            get {
                return this.DefaultSpecimenField;
            }
            set {
                if ((object.ReferenceEquals(this.DefaultSpecimenField, value) != true)) {
                    this.DefaultSpecimenField = value;
                    this.RaisePropertyChanged("DefaultSpecimen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEdit {
            get {
                return this.IsEditField;
            }
            set {
                if ((this.IsEditField.Equals(value) != true)) {
                    this.IsEditField = value;
                    this.RaisePropertyChanged("IsEdit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestService.ITestService")]
    public interface ITestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/FindTests", ReplyAction="http://tempuri.org/ITestService/FindTestsResponse")]
        Medicine.Clinic.Client.Model.TestService.DtoTest[] FindTests(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/FindTests", ReplyAction="http://tempuri.org/ITestService/FindTestsResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoTest[]> FindTestsAsync(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/EditTest", ReplyAction="http://tempuri.org/ITestService/EditTestResponse")]
        string EditTest(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/EditTest", ReplyAction="http://tempuri.org/ITestService/EditTestResponse")]
        System.Threading.Tasks.Task<string> EditTestAsync(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByCode", ReplyAction="http://tempuri.org/ITestService/GetTestByCodeResponse")]
        Medicine.Clinic.Client.Model.TestService.DtoTest GetTestByCode(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestByCode", ReplyAction="http://tempuri.org/ITestService/GetTestByCodeResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoTest> GetTestByCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestsByVisit", ReplyAction="http://tempuri.org/ITestService/GetTestsByVisitResponse")]
        Medicine.Clinic.Client.Model.TestService.DtoTest[] GetTestsByVisit(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestsByVisit", ReplyAction="http://tempuri.org/ITestService/GetTestsByVisitResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoTest[]> GetTestsByVisitAsync(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetConcreteTestsByVisit", ReplyAction="http://tempuri.org/ITestService/GetConcreteTestsByVisitResponse")]
        Medicine.Clinic.Client.Model.TestService.DtoConcreteTest[] GetConcreteTestsByVisit(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetConcreteTestsByVisit", ReplyAction="http://tempuri.org/ITestService/GetConcreteTestsByVisitResponse")]
        System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoConcreteTest[]> GetConcreteTestsByVisitAsync(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestsCostByVisit", ReplyAction="http://tempuri.org/ITestService/GetTestsCostByVisitResponse")]
        double GetTestsCostByVisit(string billingNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestService/GetTestsCostByVisit", ReplyAction="http://tempuri.org/ITestService/GetTestsCostByVisitResponse")]
        System.Threading.Tasks.Task<double> GetTestsCostByVisitAsync(string billingNumber);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestServiceChannel : Medicine.Clinic.Client.Model.TestService.ITestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestServiceClient : System.ServiceModel.ClientBase<Medicine.Clinic.Client.Model.TestService.ITestService>, Medicine.Clinic.Client.Model.TestService.ITestService {
        
        public TestServiceClient() {
        }
        
        public TestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Medicine.Clinic.Client.Model.TestService.DtoTest[] FindTests(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen) {
            return base.Channel.FindTests(dtoSpecimen);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoTest[]> FindTestsAsync(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen) {
            return base.Channel.FindTestsAsync(dtoSpecimen);
        }
        
        public string EditTest(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen) {
            return base.Channel.EditTest(dtoSpecimen);
        }
        
        public System.Threading.Tasks.Task<string> EditTestAsync(Medicine.Clinic.Client.Model.TestService.DtoTest dtoSpecimen) {
            return base.Channel.EditTestAsync(dtoSpecimen);
        }
        
        public Medicine.Clinic.Client.Model.TestService.DtoTest GetTestByCode(string code) {
            return base.Channel.GetTestByCode(code);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoTest> GetTestByCodeAsync(string code) {
            return base.Channel.GetTestByCodeAsync(code);
        }
        
        public Medicine.Clinic.Client.Model.TestService.DtoTest[] GetTestsByVisit(string billingNumber) {
            return base.Channel.GetTestsByVisit(billingNumber);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoTest[]> GetTestsByVisitAsync(string billingNumber) {
            return base.Channel.GetTestsByVisitAsync(billingNumber);
        }
        
        public Medicine.Clinic.Client.Model.TestService.DtoConcreteTest[] GetConcreteTestsByVisit(string billingNumber) {
            return base.Channel.GetConcreteTestsByVisit(billingNumber);
        }
        
        public System.Threading.Tasks.Task<Medicine.Clinic.Client.Model.TestService.DtoConcreteTest[]> GetConcreteTestsByVisitAsync(string billingNumber) {
            return base.Channel.GetConcreteTestsByVisitAsync(billingNumber);
        }
        
        public double GetTestsCostByVisit(string billingNumber) {
            return base.Channel.GetTestsCostByVisit(billingNumber);
        }
        
        public System.Threading.Tasks.Task<double> GetTestsCostByVisitAsync(string billingNumber) {
            return base.Channel.GetTestsCostByVisitAsync(billingNumber);
        }
    }
}
